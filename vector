// Example program
#include <iostream>
#include <string>
#include <vector>

using namespace std;
void fun()//independent -function
{
cout<<"Hello";    
}
// class test
// {
//     public:
//   int a;
  
//   void setA()   // dependent-method
//   {cin>>a;}
//   int fun()   // dependent-method
//   {return a;}

// };
int main()
{
  
  
  //integer
  vector <int>i;
  //0 -1-3
  cout<<"Is empty at begining of program:"<<i.empty()<<"\t size now:"<<i.size();//returns 0 or 1
  i.push_back(0);
  //default value:0 if the index is not present ,then zero will be returned
  cout<<"\nelement at i[0]:"<<i[0]<<" \ni[1]:"<<i[1]<<"\t size now:"<<i.size();;//at index 1 ,since no element is there so we got zero
  i.push_back(1);
  cout<<"\nelement at i[1]:"<<i[1]<<"\n "<<" \ni[2]:"<<i[2]<<"\t size now:"<<i.size();;
  i.push_back(3);
  cout<<"\nelement at i[2]:"<<i[2]<<"\n "<<"\t size now:"<<i.size();;
  //cout<<i;  since iterable -we cannot print directly
  cout<<endl<<"Is empty at after inserting 3 elements in a program:"<<i.empty()<<"\t size now:"<<i.size();//
 
  //looping
  cout<<"\nloop 1:";
  for(int j=0;j<i.size();j++)
      cout<<" "<<i[j];
  //loop -2
  cout<<"\nloop 2:";
  for(auto j=i.begin();j!=i.end();j++)
      cout<<" "<<*j;
      
  //insert at position vector_name.insert (position, val)
  //vector:0 1 3
  //insert 2 at posotion 2
  //insert takes position as a pointer to iterator
  cout<<"\n Insert at position\nsize:"<<i.size();
  cout<<"\n i[2]:"<<i[2];
  
  i.insert(i.begin()+2,2);
  cout<<"\nAfter insert at pos -2 ~ i[2]:"<<i[2];
  //Pop_back:removing:
  //pop_back neither return  nor print the popped element
  
  cout<<"\t\n size now:"<<i.size();
  cout<<"\nPopped elemeny:[0]:"<<i[i.size()-1];i.pop_back();
  
cout<<"\t\n size now:"<<i.size();
  cout<<"\nPopped elemeny:[1]:"<<i[i.size()-1];i.pop_back();
  
  cout<<"\t\n size now:"<<i.size();
  cout<<"\nPopped elemeny:[2]:"<<i[i.size()-1];i.pop_back();
  
  
  
//   //float
//   vector <float>f;
//   //string
//   vector <string>s;
//   //class
// //   vector <test>t;
  
  //begin() – Returns an iterator pointing to the first element in the vector
   // end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector
   // rbegin() – Returns a reverse iterator pointing to the last element in the vector (reverse beginning). It moves from last to first element
   // rend()  - Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector (considered as reverse end)
    //size() – Returns the number of elements in the vector.
    // max_size() – Returns the maximum number of elements that the vector can hold.
    // capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
    // resize(n) – Resizes the container so that it contains ‘n’ elements.
    // empty() – Returns whether the container is empty.
    //at(g) – Returns a reference to the element at position ‘g’ in the vector
    // front() – Returns a reference to the first element in the vector
    // back() – Returns a reference to the last element in the vector
    // push_back() – It push the elements into a vector from the back
    // pop_back() – It is used to pop or remove elements from a vector from the back.
    // insert() – It inserts new elements before the element at the specified position
    // erase() – It is used to remove elements from a container from the specified position or range.
    // swap() – It is used to swap the contents of one vector with another vector of same type. Sizes may differ.
    // clear() – It is used to remove all the elements of the vector container
}
